package casino.game;

import bettingauthorityapi.BetToken;
import bettingauthorityapi.BetTokenAuthority;
import casino.bet.Bet;
import casino.bet.MoneyAmount;
import casino.cashier.Cashier;
import casino.idfactory.IDFactory;
import models.BetID;
import models.BettingRoundID;
import org.junit.Assert;
import org.junit.Test;

import java.util.HashSet;
import java.util.Set;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.mock;

public class IBettingRoundTest {
    private BetTokenAuthority betTokenAuthority = mock(BetTokenAuthority.class);
    private IDFactory idFactory = mock(IDFactory.class);
    private Cashier cashier = mock(Cashier.class);
    private BettingRoundID bettingRoundID = (BettingRoundID) idFactory.createId("BettingRoundID");
    private BettingRound bettingRound = mock(BettingRound.class);
    private BetToken betToken = betTokenAuthority.getBetToken(bettingRoundID);
    private MoneyAmount moneyAmount = mock(MoneyAmount.class);

    /**
     * this will check the current round and create new round
     * This test checking method: BettingRoundID getBettingRoundID()
     */
    @Test
    public void getBettingRoundID_checkBettingRoundID_BettingRoundID() {
        //arrange
        BettingRound bettingRound = new BettingRound(bettingRoundID, betToken, cashier);
        //act
        BettingRoundID result = bettingRound.getBettingRoundID();
        //assert
        assertEquals(result, bettingRoundID);
    }

    /**
     * this test should pass and return true when bet is placed successfully when player has enough cridit in the card
     * This test checking method: boolean placeBet(Bet bet)
     */
    @Test
    public void placeBet_PlacingBetAndAddedToTheListOfBets_True() {
        //arrange
        moneyAmount = new MoneyAmount(2);
        Bet betToPlace = new Bet(new BetID(), moneyAmount);
        BettingRound bettingRound = new BettingRound(bettingRoundID, betToken, cashier);
        //act
        boolean result = bettingRound.placeBet(betToPlace);
        //assert
        Assert.assertTrue(result);
    }

    /**
     * this test should pass and return successfully list of all best when bets has been made
     * This test checking method: getAllBetsMade()
     */
    @Test
    public void getAllBetsMade_returnAllBetsMadeDuringThisRound() {
        //arrange
        Bet betToPlace = new Bet(new BetID(), moneyAmount);
        Set<Bet> listOfBets = new HashSet<Bet>();
        listOfBets.add(betToPlace);
        bettingRound = new BettingRound(bettingRoundID, betToken, cashier);
        bettingRound.setListOfBetsMadeByTheRound(listOfBets);
        //act
        Set<Bet> result = bettingRound.getAllBetsMade();
        //assert
        assertEquals(result, listOfBets);
    }

    /**
     * get whole-number value generated by gambling BetToken authority
     * This test checking method: BetToken getBetToken
     */
    @Test
    public void getBetToken_checkingGetToken_returnToken() {
        //Arrange
        betToken = betTokenAuthority.getBetToken(bettingRoundID);
        bettingRound = new BettingRound(bettingRoundID, betToken, cashier);
        //Act
        BetToken bt = bettingRound.getBetToken();
        //Assert
        assertEquals(betToken, bt);
    }

    /**
     * Bet round will keep tracking of all numbers when atleast one bet is present
     * This test checking method:  int numberOFBetsMade
     */
    @Test
    public void numberOFBetsMade_trackingNumberOfBets_returnNumber() {
        //Arrange
        Bet betToPlace = new Bet(new BetID(), moneyAmount);

        Set<Bet> listOfBets = new HashSet<Bet>();
        listOfBets.add(betToPlace);
        bettingRound = new BettingRound(bettingRoundID, betToken, cashier);
        bettingRound.setListOfBetsMadeByTheRound(listOfBets);
        //Act
        int result = bettingRound.numberOFBetsMade();
        //Assert
        assertEquals("Number of values not match", 1, result);

    }

    /**
     * Bet round will keep tracking of all numbers of bets return fall when no bets has been made
     * This test checking method:  int numberOFBetsMade
     */
    @Test
    public void trackingNumberOfBets_NoBetPlaced_returnEmptyList() {
        //Arrange
        bettingRound = new BettingRound(bettingRoundID, betToken, cashier);
        //Act
        int numberOFBets = bettingRound.numberOFBetsMade();
        //Assert
        assertTrue(bettingRound.getAllBetsMade().isEmpty());
        assertEquals("List Not Empty!", 0, numberOFBets);
    }
}
